#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
from logging import getLogger, basicConfig

logger = getLogger(__name__)
logcfg = {
  #"format": "%(asctime)s.%(msecs).03d %(process)d %(thread)x %(levelname).4s;%(module)s(%(lineno)d/%(funcName)s) %(message)s",
  "format": "%(message)s",
  "datefmt": "%Y/%m/%dT%H:%M:%S",
  "level": 10,
  "stream": sys.stdout,
}
basicConfig(**logcfg)

import os
import time
import re
import multiprocessing
import Queue
import functools
import pexpect

os.environ["TERM"] = "dumb"

class KnownSshKey(Exception):
    def __init__(self, key):
        self._key = key
    def __str__ (self):
        return ("{0}: please confirm ~/.ssh/known_hosts".format(self._key))

# su/ssh/telnet <user>[:pass][@host]
MHURL=r"^((?P<tag>[^=]+)=){0,1}((?P<protocol>[^:]+)://){0,1}(?P<user>[^/:@]+){1}(:(?P<password>[^:@]+)){0,1}(@(?P<host>[^@:]+)(:(?P<port>[^:]+)){0,1}){0,1}$"

CMD_TMPLS={
        "ssh": ["{protocol} -p {port} {user}@{host}", { "port": 22 }],
        "telnet": ["{protocol} {host} {port}", { "port": 23 }],
        "su": ["{protocol} - {user}", {}],
        }
PROMPTS="[#$%] \Z"
SNDRECVS={
        "ssh": [
            ["assword: ", lambda conn, parm: conn.sendline("{password}".format(**parm))],
            ["\(yes/no\)\?", lambda conn, parm: conn.sendline("yes")],
            [r"@@@@@@@@", lambda conn, parm: (_ for _ in ()).throw(KnownSshKey(parm))],
            [PROMPTS, lambda conn, parm: conn ],
        ],
        "su": [
            ["assword: ", lambda conn, parm: conn.sendline("{password}".format(**parm))],
            [PROMPTS, lambda conn, parm: conn ],
        ],
        }

def traclog( f ):
    @functools.wraps(f)
    def _f(*args, **kwargs):
        logger.debug("ENTER:{0} {1}".format( f.__name__, kwargs if kwargs else args))
        result = f(*args, **kwargs)
        logger.debug("RETRN:{0} {1}".format( f.__name__, result))
        return result
    return _f

def fsts(ls):
    return [l[0] for l in ls]

def snds(ls):
    return [l[1] for l in ls]

def imupdate(default, value):
    return dict([(k,v) if v or not default.get(k) else (k, default[k]) for (k,v) in value.items()])

@traclog
def cmd(template, parm):
    return template[0].format(**imupdate(default=template[1], value=parm)) 

@traclog
def auth_ssh(conn, parm, procedure):
    while True:
        try:
            i = conn.expect( fsts(procedure), timeout=1 )
            rslt = snds(procedure)[i](conn,parm)
            if rslt == conn:
                return rslt
        except pexpect.TIMEOUT as e:
            continue

@traclog
def makeconn(parm):
    #return ( cmd(CMD_TMPLS[parms[0]["protocol"]], parms[0]), parms[1:])
    return pexpect.spawn(cmd(CMD_TMPLS[parm["protocol"]], parm))


def exexpect(tag, conn, expection):
    i=-1
    while i != 0:
        i = conn.expect([expection, r"[\r\n]+", pexpect.TIMEOUT])
        if i == 1:
            logger.info("{0}: {1}".format(tag,conn.before))


def workerloop(que,done,parms):
    tag = parms[0]["tag"] if parms[0].get("tag") else "{0}@{1}".format(parms[0].get("user"),parms[0]["host"])
    conn = makeconn(parms[0])
    conn = auth_ssh(conn, parms[0],SNDRECVS[parms[0]["protocol"]])
    while True:
        try:
            l=que.get(timeout=1)
            logger.info("{0}: {1}".format(tag,l))
            conn.send(l)
            exexpect(tag,conn,PROMPTS)
        except Queue.Empty as e:
            if done.value:
                break

def as_url(s):
    rslt=re.search(MHURL, s)
    return imupdate( default={"protocol":"ssh"}, value=rslt.groupdict() ) if rslt else None

def as_csv(parser,s):
    logger.debug(s)
    if len(s.split(',')) >1:
        return [parser(x) for x in  s.split(',')]
    else:
        return [parser(s)]

def as_json(parser,s):
    logger.debug(s)
    import json
    try:
        return [parser(x) for x in  json.loads(s)]
    except ValueError as e:
        return [parser(s)]

def main(opts):
    if opts["verbose"]: logger.info("{0}".format(opts))
    done = multiprocessing.Value('b', False)
    procs = []
    for parms in [as_json(as_url, arg) for arg in opts["args"]]:
        que = multiprocessing.JoinableQueue()
        procs.append((multiprocessing.Process(target=workerloop, args=(que,done,parms)), que))
    
    for p in procs: p[0].start()

    while True:
        l=sys.stdin.readline()
        logger.debug(l)
        for p in procs:
            p[1].put(l)

def parsed_opts():
    import optparse
    import os

    opt = optparse.OptionParser()
    opt.add_option("-p", "--prof", default=False, action="store_true", help="get profile [default: %default]" )
    opt.add_option("-v", "--verbose", default=False, action="store_true", help="show detail info [default: %default]" )
    (opts, args)= opt.parse_args()
    return dict(vars(opts).items() + [("args", args)])

if __name__ == '__main__':

    opts = parsed_opts()
    if opts['prof']:
      import cProfile
      cProfile.run('main(opts)')
      sys.exit(0)
    main(opts)
